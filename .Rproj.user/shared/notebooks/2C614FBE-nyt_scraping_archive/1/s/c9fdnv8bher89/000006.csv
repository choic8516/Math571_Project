"0","library(jsonlite)"
"0","library(magrittr)"
"0","library(tidyverse)"
"0","library(lubridate)"
"0","library(httr)"
"0","library(stringr)"
"0","options(max.print=100)"
"0","cristobal_key <-""5b4e1b897deb448caa65b58d6c5941ab""  # Insert API key here"
"0","year<-1990 #not necessary with the for loop"
"0","month<-1 #not necessary with the for loop"
"0","ds.used<-character()"
"0","for (year in c(2016:2016)){"
"0","        #I create the empty data frame for the headlines"
"0","        nyt.df<-data.frame()"
"0","        for (month in c(7:7)){"
"0","        "
"0","                url.nyt.archive<-paste0(""https://api.nytimes.com/svc/archive/v1/"",year,""/""  "
"0","                                        ,month,"".json"",""?api-key="",cristobal_key)"
"0","                df.json<-fromJSON(url.nyt.archive)"
"0","                "
"0","                #I extract the headlines from the json file"
"0","                #headlines<-df.json$response$docs$headline #use this until 2005"
"0","                "
"0","                #The structure of df.json$response$docs$headline changes in 1995-03 "
"0","                #(a new column appears)so we need the following line to make it consistent"
"0","                #Until 2005 use the following lines"
"0","                headlines<-df.json$response$docs$headline[1:2]"
"0","                "
"0","                #As of 2006 the structure of the data follows an irregular pattern"
"0","                #some months the headlines are presented as data frame"
"0","                #and other months as nested lists. So we need the following conditional"
"0","                #structure to deal with different data types"
"0","                head.class<-class(headlines)"
"0","                if (head.class==""data.frame""){"
"0","                section<-df.json$response$docs$section_name"
"0","                date.pub<-ymd_hms(df.json$response$docs$pub_date)"
"0","                }"
"0","                "
"0","                if (head.class==""list""){"
"0","                list.processed<-sapply(df.json$response$docs$headline,"
"0","                                       function(l) c(l$main,l$kicker)[1:2])"
"0","                headlines<-plyr::ldply(list.processed, rbind)"
"0","                dims<-sapply(list.processed,FUN = length)"
"0","                missing.headlines<-which(dims!=2)"
"0","                section<-df.json$response$docs$section_name[-missing.headlines]"
"0","                date.pub<-ymd_hms(df.json$response$docs$pub_date)[-missing.headlines]"
"0","                }"
"0","                "
"0","                #I want to keep track of the data structures used"
"0","                ds.used<-c(ds.used,paste0(year,""-"",month,"" "",head.class))"
"0","                "
"0","                #I extract the date and section name and add it to the data frame"
"0","                "
"0","                headlines<-cbind(headlines,section, date.pub)"
"0","                "
"0","                colnames(headlines)<-c(""main"",""kicker"",""section_name"",""pub_date"")"
"0","                #the following 2 lines are to store the section and date as character"
"0","                #in de data frame instead as a factor"
"0","                headlines$section_name<-as.character(headlines$section_name)"
"0","                headlines$pub_date<-substr(as.character(headlines$pub_date),1,10)"
"0","                nyt.df<-rbind(nyt.df,headlines)"
"0","                print(c(year,month,head.class,length(headlines$pub_date)))"
"0","        }"
"0","        #I identify the headlines from the ""Business"" category"
"0","        bus.indexes<-str_detect(tolower(nyt.df$section_name), ""business"")"
"0","        bus.indexes[is.na(bus.indexes)]<-F"
"0","        #I create a subset of the data frame with only the business headlines"
"0","        nyt.df.bus<-nyt.df[bus.indexes,]"
"0","        "
"0","        write.csv(nyt.df,paste0(""data_test/nyt_headlines_"",year,"".csv""))"
"0","        write.csv(nyt.df.bus,paste0(""data_test/nyt_headlines_bus_"",year,"".csv""))"
"0","        "
"0","        "
"0","}"
"1","[1]"
"1"," ""2016""      "
"1"," ""7""         "
"1"," ""data.frame"""
"1"," ""6120""      "
"1","
"
